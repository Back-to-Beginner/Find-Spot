# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      working-directory: ./backend
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      DB_URL: ${{ secrets.DB_URL }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        working-directory: ${{ env.working-directory }}
        run: chmod +x gradlew

      # 빌드
      - name: Build with Gradle
        working-directory: ${{ env.working-directory }}
        run: ./gradlew clean build

      # 전송할 파일을 담을 디렉토리 생성
      - name: Make Directory for deliver
        working-directory: ${{ env.working-directory }}
        run: mkdir deploy

      # Jar 파일 Copy
      - name: Copy Jar
        working-directory: ${{ env.working-directory }}
        run: cp ./build/libs/*.jar ./deploy

      # script file Copy
      - name: Copy shell
        working-directory: ${{ env.working-directory }}
        run: cp ./scripts/* ./deploy

      # 압축파일 형태로 전달
      - name: Make zip file
        working-directory: ${{ env.working-directory }}
        run: zip -r -qq -j ./springboot-intro-build.zip ./deploy

      # S3 Bucket으로 copy
      - name: Deliver to AWS S3
        working-directory: ${{ env.working-directory }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
        run: aws s3 cp --region ap-northeast-2 --acl private ./springboot-intro-build.zip s3://btb-deploy/

      # Deploy
      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
        run: |
          aws deploy create-deployment \
          --application-name btb-deploy \
          --deployment-group-name btb-deploy-group \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=btb-deploy,bundleType=zip,key=springboot-intro-build.zip \
          --region ap-northeast-2